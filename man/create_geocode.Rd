% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geocode.R
\name{create_geocode}
\alias{create_geocode}
\title{Geocode Unique Addresses}
\usage{
create_geocode(csv_file, output_file)
}
\arguments{
\item{file_path}{Path to the input file (CSV, RDS, or XLSX) containing address data.}

\item{google_maps_api_key}{Your Google Maps API key.}

\item{output_file_path}{Path to the output CSV file where the geocoded data will be saved. (Optional)}

\item{location}{An sf object representing the location for which isolines will be calculated.}

\item{range}{A numeric vector of time ranges in seconds.}

\item{posix_time}{A POSIXct object representing the date and time of calculation. Default is "2023-10-20 08:00:00".}
}
\value{
A dataframe containing geocoded address data with latitude and longitude.

A list of isolines for different time ranges, or an error message if the calculation fails.
}
\description{
This function geocodes unique addresses using the Google Maps API and appends the
latitude and longitude to the original dataset. Please ensure that every data set
must have a column named 'address'.
}
\examples{
\dontrun{
# Define the input file path, Google Maps API key, and output file path (optional)
file_path <- "input_data.csv"
google_maps_api_key <- "your_api_key"
output_file_path <- "output_data.csv"  # Optional

# Call the geocode_unique_addresses function with or without specifying output_file_path
geocoded_data <- geocode_unique_addresses(file_path, google_maps_api_key)
# or
geocoded_data <- geocode_unique_addresses(file_path, google_maps_api_key, output_file_path)
}

\dontrun{

# Set your HERE API key in your Renviron file using the following steps:
# 1. Add key to .Renviron
Sys.setenv(HERE_API_KEY = "your_api_key_here")
# 2. Reload .Renviron
readRenviron("~/.Renviron")

# Define a sf object for the location
location <- sf::st_point(c(-73.987, 40.757))

# Calculate isolines for the location with a 30-minute, 60-minute, 120-minute, and 180-minute range
isolines <- create_isochrones(location = location, range = c(1800, 3600, 7200, 10800))

# Print the isolines
print(isolines)

}
}
