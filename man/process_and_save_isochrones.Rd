% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_isochrones.R,
%   R/test_and_process_isochrones.R
\name{process_and_save_isochrones}
\alias{process_and_save_isochrones}
\title{Memoized function to try a location with isoline calculations}
\usage{
process_and_save_isochrones(input_file, chunk_size = 25)

process_and_save_isochrones(input_file, chunk_size = 25)
}
\arguments{
\item{input_file}{A data frame containing location data with columns "lat" and "long."
The input file should represent geographic coordinates for which
isochrones will be calculated.}

\item{chunk_size}{The number of rows to process in each chunk. Default is 25.}

\item{location}{An sf object representing the location for which isolines will be calculated.}

\item{range}{A numeric vector of time ranges in seconds.}

\item{posix_time}{A POSIXct object representing the date and time of calculation. Default is "2023-10-20 08:00:00".}
}
\value{
A list of isolines for different time ranges, or an error message if the calculation fails.

An sf (simple features) data frame containing isochrone polygons.
}
\description{
This function calculates isolines for a given location using the hereR package.

This function takes an input file of locations, retrieves isochrones for each location,
and saves them as shapefiles. It processes the data in chunks of 25 rows at a time to
prevent data loss in case of errors.
}
\details{
This function uses the \code{hereR} package to calculate isochrones based on the
provided geographic coordinates. It retrieves isochrones for each location in
the input file, processes the data in chunks to minimize the risk of data loss
in case of errors, and saves the isochrones as shapefiles for further analysis.
}
\examples{
\dontrun{

# Set your HERE API key in your Renviron file using the following steps:
# 1. Add key to .Renviron
Sys.setenv(HERE_API_KEY = "your_api_key_here")
# 2. Reload .Renviron
readRenviron("~/.Renviron")

# Define a sf object for the location
location <- sf::st_point(c(-73.987, 40.757))

# Calculate isolines for the location with a 30-minute, 60-minute, 120-minute, and 180-minute range
isolines <- create_isochrones(location = location, range = c(1800, 3600, 7200, 10800))

# Print the isolines
print(isolines)

}

# Load the input file (e.g., from a CSV)
input_file <- read_csv("data/locations.csv")

# Process and save isochrones for the input file (chunk size set to 25)
isochrones_data <- process_and_save_isochrones(input_file, chunk_size = 25)

# Optionally, write the combined isochrones to a shapefile
sf::st_write(isochrones_data, dsn = "data/isochrones/isochrones_all_combined",
             layer = "isochrones", driver = "ESRI Shapefile", quiet = FALSE)

}
